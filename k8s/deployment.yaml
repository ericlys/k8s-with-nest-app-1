apiVersion: apps/v1 # Define a versão da API do Kubernetes usada para o recurso (Deployment).
kind: Deployment     # Especifica o tipo de recurso que está sendo criado (um Deployment).

metadata:
  name: app-ts       # Nome do Deployment.
  # namespace: first-app  # Namespace onde o Deployment será criado.

spec:
  replicas: 6        # Número de réplicas (pods) desejadas para manter ativas.
  strategy:
    type: RollingUpdate           # Estratégia de atualização: faz rollout gradual. / Recreate - seria uma atualização completa.
    rollingUpdate:
      maxSurge: 2                 # Permite até 2 ou % pods extras durante a atualização.
      maxUnavailable: 1           # No máximo 1 ou % pod pode estar indisponível durante a atualização.
  selector:
    matchLabels:
      app: app-ts                # Seleciona os pods com esse label para serem gerenciados por este Deployment.
  template:
    metadata:
      labels:
        app: app-ts              # Define os labels para os pods que serão criados.
    spec:
      containers:
        - name: app-ts           # Nome do container.
          image: ericlys/app-ts:v10        # Imagem do container (com tag v10).
          imagePullPolicy: IfNotPresent    # Só faz pull da imagem se ela não estiver presente localmente.
          envFrom:
            - configMapRef:
                name: app-ts              # Importa variáveis de ambiente do ConfigMap `app-ts`.
            - secretRef:
                name: app-ts-secrets      # Importa variáveis de ambiente do Secret `app-ts-secrets`.

          # exemplo útil se quiser carregar variáveis individualmente:
          # env:
          #   - name: APP
          #     valueFrom:
          #       configMapKeyRef:
          #         name: app-ts
          #         key: app-name
          #   - name: API_KEY
          #     valueFrom:
          #       secretKeyRef:
          #         name: app-ts-secrets
          #         key: api-key

          ports:
            - containerPort: 3000         # Porta exposta no container.

          startupProbe:
            # Verifica se o app conseguiu "subir" (executar) corretamente.
            # exec:  # Pode ser usado para executar um comando específico.
            #   command: 
            #     - /bin/sh
            #     - -c
            #     - check.sh # Comando que será executado para verificar o estado inicial do app.
            httpGet:
              path: /healthz              # Endpoint que será verificado.
              port: 3000
            failureThreshold: 2           # Após 2 falhas consecutivas, o container será considerado com erro.
            successThreshold: 1           # Basta 1 sucesso para considerar que iniciou.
            timeoutSeconds: 1             # Tempo limite de cada tentativa.
            periodSeconds: 10             # Intervalo entre tentativas.
            initialDelaySeconds: 10       # Tempo antes de iniciar a primeira tentativa.

          readinessProbe:
            # Verifica se o app está pronto para receber tráfego (antes de adicionar ao LoadBalancer/Service).
            httpGet:
              path: /readyz
              port: 3000
            failureThreshold: 3
            successThreshold: 1
            timeoutSeconds: 1
            periodSeconds: 15 #checa a cada 15 segundos
            initialDelaySeconds: 5

          livenessProbe:
            # Verifica se o app está saudável durante sua execução. Reinicia o container em caso de falha contínua.
            httpGet:
              path: /healthz
              port: 3000
            failureThreshold: 5
            successThreshold: 1
            timeoutSeconds: 1
            periodSeconds: 10
            initialDelaySeconds: 5

          resources:
            # Define requisições mínimas e limites máximos de CPU e memória.
            requests:
              cpu: 400m         # Requisição mínima de CPU (400 millicores).
              memory: 128Mi     # Requisição mínima de memória.
            limits:
              cpu: 700m         # Limite máximo de CPU.
              memory: 256Mi     # Limite máximo de memória.
              
          volumeMounts:
            - name: app-ts-data  # Nome do volume a ser montado.
              mountPath: /usr/src/app/uploads  # Monta o volume persistente no caminho especificado dentro do container (dockerfile da imagem).
     
      volumes:
        - name: app-ts-data  # Nome do volume persistente.
          persistentVolumeClaim:
            claimName: fist-pvc  # Nome do PersistentVolumeClaim que será usado para provisionar o volume.
            # O PVC deve ser criado previamente e deve ter o mesmo nome especificado  